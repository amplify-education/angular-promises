// Generated by CoffeeScript 1.7.1
(function() {
  var $q, $timeout, Deferred, Promise, QNotDefinedError, TimeoutNotDefinedError, makeApplyCallback, performDeferredAction,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $q = null;

  $timeout = null;

  makeApplyCallback = function(action, self) {
    return function() {
      var callback, callbacks, _i, _len, _results;
      callbacks = self["__" + action + "Callbacks__"].slice();
      self["__" + action + "Callbacks__"] = [];
      _results = [];
      for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
        callback = callbacks[_i];
        _results.push(callback.apply(null, arguments));
      }
      return _results;
    };
  };

  Promise = (function() {
    function Promise(promise) {
      this.progress = __bind(this.progress, this);
      this.always = __bind(this.always, this);
      this.fail = __bind(this.fail, this);
      this.done = __bind(this.done, this);
      this.__doneCallbacks__ = [];
      this.__failCallbacks__ = [];
      this.__alwaysCallbacks__ = [];
      this.__progressCallbacks__ = [];
      promise.then(makeApplyCallback('done', this), makeApplyCallback('fail', this), makeApplyCallback('progress', this));
      promise["finally"](makeApplyCallback('always', this));
      this;
    }

    Promise.prototype.done = function(callback) {
      this.__doneCallbacks__.push(callback);
      return this;
    };

    Promise.prototype.fail = function(callback) {
      this.__failCallbacks__.push(callback);
      return this;
    };

    Promise.prototype.always = function(callback) {
      this.__alwaysCallbacks__.push(callback);
      return this;
    };

    Promise.prototype.progress = function(callback) {
      this.__progressCallbacks__.push(callback);
      return this;
    };

    return Promise;

  })();

  QNotDefinedError = (function(_super) {
    __extends(QNotDefinedError, _super);

    function QNotDefinedError() {
      this.name = 'QNotDefinedError';
      this.message = '$q must injected. Did you instantiate Deferred with `new`?';
    }

    return QNotDefinedError;

  })(Error);

  TimeoutNotDefinedError = (function(_super) {
    __extends(TimeoutNotDefinedError, _super);

    function TimeoutNotDefinedError() {
      this.name = 'TimeoutNotDefinedError';
      this.message = '$timeout must injected. Did you instantiate Deferred with `new`?';
    }

    return TimeoutNotDefinedError;

  })(Error);

  performDeferredAction = function(action, calledArguments) {
    return $timeout(((function(_this) {
      return function() {
        return _this.__deferred__[action].apply(_this, calledArguments);
      };
    })(this)), 0);
  };

  Deferred = (function() {
    function Deferred() {
      this.promise = __bind(this.promise, this);
      this.notify = __bind(this.notify, this);
      this.reject = __bind(this.reject, this);
      this.resolve = __bind(this.resolve, this);
      if (!$q) {
        throw new QNotDefinedError;
      }
      if (!$timeout) {
        throw new TimeoutNotDefinedError;
      }
      this.__deferred__ = $q.defer();
      this.__promise__ = new Promise(this.__deferred__.promise);
      this;
    }

    Deferred.prototype.resolve = function() {
      performDeferredAction.call(this, 'resolve', arguments);
      return this;
    };

    Deferred.prototype.reject = function() {
      performDeferredAction.call(this, 'reject', arguments);
      return this;
    };

    Deferred.prototype.notify = function() {
      performDeferredAction.call(this, 'notify', arguments);
      return this;
    };

    Deferred.prototype.promise = function() {
      return this.__promise__;
    };

    return Deferred;

  })();

  angular.module('angular-promises', []).factory('Deferred', [
    '$q', '$timeout', function(_$q_, _$timeout_) {
      $q = _$q_;
      $timeout = _$timeout_;
      return Deferred;
    }
  ]);

}).call(this);
